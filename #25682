import java.util.*;
import java.io.*;
import java.math.*;

public class Main {
  public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    StringTokenizer st = new StringTokenizer(br.readLine());
    int n = Integer.parseInt(st.nextToken());
    int m = Integer.parseInt(st.nextToken());
    int k = Integer.parseInt(st.nextToken());

    // TABLE 입력
    char[][] board = new char[n][m];
    for(int i = 0; i < n; i++) {
      String str = br.readLine();
      for(int j = 0; j < m; j++) {
        board[i][j] = str.charAt(j);
      }
    }

    // 누적 합 배열 생성
    int[][] w_Dp = new int[n+1][m+1]; // w 로 시작하는 체스판을 위해 필요한 칠 횟수
    int[][] b_Dp = new int[n+1][m+1]; // b 로 시작하는 체스판을 위해 필요한 칠 횟수
    
    for(int i = 1; i <= n; i++) {
      for(int j = 1; j <= m; j++) {
        int wCost = ((i + j) % 2 == 0) ? ((board[i-1][j-1] == 'B') ? 1 : 0) : ((board[i-1][j-1] == 'W') ? 1 : 0);
        int bCost = ((i + j) % 2 == 0) ? ((board[i-1][j-1] == 'W') ? 1 : 0) : ((board[i-1][j-1] == 'B') ? 1 : 0);

        w_Dp[i][j] = w_Dp[i-1][j] + w_Dp[i][j-1] - w_Dp[i-1][j-1] + wCost;
        b_Dp[i][j] = b_Dp[i-1][j] + b_Dp[i][j-1] - b_Dp[i-1][j-1] + bCost;
      }
    }

    // k * k 에 대한 계산
    int min = Integer.MAX_VALUE;
    for(int i = 1; i <= n-k+1; i++) {
      for(int j = 1; j <= m-k+1; j++) {
        int endX = i + k -1;
        int endY = j + k -1;  

        int wCost = w_Dp[endX][endY] - w_Dp[i-1][endY] - w_Dp[endX][j-1] + w_Dp[i-1][j-1];
        int bCost = b_Dp[endX][endY] - b_Dp[i-1][endY] - b_Dp[endX][j-1] + b_Dp[i-1][j-1];

        min = Math.min(min, Math.min(wCost, bCost));
      }
    }
    
    System.out.println(min);
  }
}
