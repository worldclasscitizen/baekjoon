import java.util.*;
import java.io.*;

public class Main {
  // Mutable Matrix
  static int[][] matrix;
  // Immutable Matrix(Original)
  static int[][] origin;
  // Size of Matrix
  static int n;

  public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    StringTokenizer st = new StringTokenizer(br.readLine());

    // INPUT n(size of matrix), b(square number)
    n = Integer.parseInt(st.nextToken());
    long Longb = Long.parseLong(st.nextToken());

    // INPUT Matrix
    matrix = new int[n][n];
    origin = new int[n][n];
    for (int i = 0; i < n; i++) {
      st = new StringTokenizer(br.readLine());
      for (int j = 0; j < n; j++) {
        matrix[i][j] = Integer.parseInt(st.nextToken());
        origin[i][j] = matrix[i][j];
      }
    }

    // CALL Recursion method
    int[][] result = rec(matrix, Longb);

    // PRINT with calculating remainder
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        System.out.print(result[i][j] % 1000 + " ");
      }
      System.out.println();
    }
  }

  // CALCULATE Power of Matrix
  static int[][] pow(int[][] mat1, int[][] mat2) {
    int[][] matmat = new int[n][n];
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        for (int q = 0; q < n; q++) {
          matmat[i][j] += mat1[i][q] * mat2[q][j] % 1000;
          matmat[i][j] %= 1000;
        }
      }
    }
    return matmat;
  }

  // Recursion method
  static int[][] rec(int[][] matrix, long b) {
    if (b == 1) {
      return origin;
    }

    matrix = rec(matrix, b / 2);

    matrix = pow(matrix, matrix);

    if (b % 2 != 0) {
      matrix = pow(matrix, origin);
    }
    return matrix;
  }
}
