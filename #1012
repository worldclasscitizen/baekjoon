import java.io.*;
import java.util.*;

public class Main {
    static int[][] field;
    static boolean[][] visited;
    static int m, n, k;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        
        int t = Integer.parseInt(st.nextToken());

        for (int i = 0; i < t; i++) {
            st = new StringTokenizer(br.readLine());
            // 밭의 가로 길이
            m = Integer.parseInt(st.nextToken());
            // 밭의 세로 길이
            n = Integer.parseInt(st.nextToken());

            field = new int[n][m];
            visited = new boolean[n][m];

            // 심어져 있는 배추의 개수
            k = Integer.parseInt(st.nextToken());
            for (int j = 0; j < k; j++) {
                st = new StringTokenizer(br.readLine());
                int xPos = Integer.parseInt(st.nextToken());
                int yPos = Integer.parseInt(st.nextToken());

                field[yPos][xPos] = 1;
            }
            
            int count = 0;

            // 모든 밭을 순회하며
            for (int q = 0; q < n; q++) {
                for (int w = 0; w < m; w++) {
                    // 배추가 심어져 있고, 방문한 적이 없다면 count 값을 증가시키고 다시 탐색을 시작
                    if (field[q][w] == 1 && !visited[q][w]) {
                        count++;
                        hmm(q, w);
                    }
                }
            }

            System.out.println(count);
        }
    }

    static private void hmm(int yPos, int xPos) {
        // 방문한 적이 있다면 패스
        if (visited[yPos][xPos] == true) { return; }

        // 방문한 적이 없다면 방문 처리
        visited[yPos][xPos] = true;

        // 배추가 심어져 있다면,
        if (field[yPos][xPos] == 1) {
            // 근접한 위치에 배추가 심어져 있는지 확인
            // 확인하면서 방문 처리를 함으로써 붙어 있는 배추끼리는 하나의 그룹으로 묶인다.
            if (canGoDown(yPos + 1, xPos)) { hmm(yPos + 1, xPos); }
            if (canGoUp(yPos - 1, xPos)) { hmm(yPos - 1, xPos); }
            if (canGoLeft(yPos, xPos - 1)) { hmm(yPos, xPos - 1); }
            if (canGoRight(yPos, xPos + 1)) { hmm(yPos, xPos + 1); }
        }
    }

    // 이동할 수 있는 위치인지, 방문한 적이 없는지 확인
    static private boolean canGoDown(int yPos, int xPos) {
        if (yPos < n && visited[yPos][xPos] == false) {
            return true;
        }
        return false;
    }
    
    static private boolean canGoUp(int yPos, int xPos) {
        if (yPos > -1 && visited[yPos][xPos] == false) {
            return true;
        }
        return false;
    }
    
    static private boolean canGoLeft(int yPos, int xPos) {
        if (xPos > -1 && visited[yPos][xPos] == false) {
            return true;
        }
        return false;
    }
    
    static private boolean canGoRight(int yPos, int xPos) {
        if (xPos < m && visited[yPos][xPos] == false) {
            return true;
        }
        return false;
    }
}
