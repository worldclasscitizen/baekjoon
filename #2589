import java.io.*;
import java.util.*;

public class Main {
    static boolean[][] visited;
    static char[][] map;

    static int count;
    static int answer;
    static int n, m;

    static int[] dx = { -1, 0, 1, 0 };
    static int[] dy = { 0, 1, 0, -1 };

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
        
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        map = new char[n][m];
        visited = new boolean[n][m];

        answer = Integer.MIN_VALUE;

        for (int i = 0; i < n; i++) {
            String str = br.readLine();
            for (int j = 0; j < m; j++) {
                map[i][j] = str.charAt(j);
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (map[i][j] == 'W') continue;
            
                visited = new boolean[n][m]; 
                count = 0;
                bfs(i, j);
                answer = Math.max(answer, count);
            }
        }
        System.out.println(answer - 1);
    }

    static void bfs(int xPos, int yPos) {
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[] {xPos, yPos});
        visited[xPos][yPos] = true;

        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int q = 0; q < size; q++) {
                int[] position = queue.poll();
    
                for (int i = 0; i < 4; i++) {
                    int nx = position[0] + dx[i];
                    int ny = position[1] + dy[i];
    
                    if (!canMove(nx ,ny)) continue;
    
                    queue.add(new int[] {nx ,ny});
                    visited[nx][ny] = true;
                }
            }
            count++;
        }
    }

    static boolean canMove(int xPos, int yPos) {
        if (xPos < 0 || yPos < 0 || xPos >= n || yPos >= m || visited[xPos][yPos] || map[xPos][yPos] == 'W') return false;
        else return true;
    }
}
