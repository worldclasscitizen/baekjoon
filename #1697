import java.util.*;
import java.io.*;

public class Main {
  static int n, k;
  static ArrayList<ArrayList<Integer>> graph;
  public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    StringTokenizer st = new StringTokenizer(br.readLine());

    graph = new ArrayList<>();

    for (int i = 0; i <= 100000; i++) {
      graph.add(new ArrayList<>());
    }

    graph.get(0).add(1);

    for (int i = 1; i <= 100000; i++) {
      if (i + 1 <= 100000) {
        graph.get(i).add(i+1);
      }
      if (i * 2 <= 100000) {
        graph.get(i).add(i*2);
      }
      graph.get(i).add(i-1);
    }

    n = Integer.parseInt(st.nextToken());
    k = Integer.parseInt(st.nextToken());
    
    bfs(n, 0);
  }

  static private void bfs(int index, int depth) {
    boolean[] visited = new boolean[graph.size()];
    Queue<Integer> q = new LinkedList<>();

    q.add(index);
    visited[index] = true;

    while (!q.isEmpty()) {
      int size = q.size();
      for (int i = 0; i < size; i++) {
        int current = q.poll();
        
        if (current == k) {
          System.out.println(depth);
        }

        for (int node : graph.get(current)) {
          if (!visited[node]) {
            q.add(node);
            visited[node] = true;
          }
        }
      }
      depth++;
    }
  }
}
