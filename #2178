import java.io.*;
import java.util.*;

public class Main {
    static boolean[][] visited;
    static int[][] map;
    static int n, m;

    static int[] dx = { 0, 0, -1, 1 }; // 오른쪽, 왼쪽, 위, 아래
    static int[] dy = { 1, -1, 0, 0 };
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        visited = new boolean[n + 1][m + 1];
        map = new int[n + 1][m + 1];
        
        for (int i = 1; i <= n; i++) {
            String str = br.readLine();
            for (int j = 1; j <= m; j++) {
                map[i][j] = str.charAt(j-1) - 48;
            }
        }

        bfs(1, 1);
        System.out.println(map[n][m]);
    }

    static private void bfs(int x, int y) {
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{x, y});
        visited[x][y] = true;

        while (!queue.isEmpty()) {
            int[] cur = queue.poll();

            for (int dist = 0; dist < 4; dist++) {
                int nx = cur[0] + dx[dist];
                int ny = cur[1] + dy[dist];
                
                if (nx > 0 && ny > 0 && nx <= n && ny <= m) {
                    if (!visited[nx][ny] && map[nx][ny] == 1) {
                        queue.add(new int[]{nx, ny});
                        visited[nx][ny] = true;
                        map[nx][ny] = map[cur[0]][cur[1]] + 1;
                    }
                }
            }
        }
    }
}
