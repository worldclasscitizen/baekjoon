import java.io.*;
import java.util.*;

public class Main {
    static int[][] population;
    static boolean[][] visited;
    static int n;
    static int l, r;

    static int count, answer;

    static int[] dx = { -1, 0, 1, 0 };
    static int[] dy = { 0, 1, 0, -1 };    

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
        
        n = Integer.parseInt(st.nextToken());
        l = Integer.parseInt(st.nextToken());
        r = Integer.parseInt(st.nextToken());

        population = new int[n][n];
        visited = new boolean[n][n];

        for (int i = 0; i < n; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < n; j++) {
                population[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        while (true) {
            boolean checkMove = false;
            visited = new boolean[n][n];

            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (!visited[i][j]) {
                        if (bfs(i, j)) {
                            checkMove = true;    
                        }
                    }
                }
            }

            if (!checkMove) break;
            answer++;
        }
        
        System.out.println(answer);
    }

    static boolean bfs(int xPos, int yPos) {
        Queue<int[]> queue = new LinkedList<>();
        List<int[] > merged = new ArrayList<>();

        queue.add(new int[] {xPos, yPos});
        merged.add(new int[] {xPos, yPos});
        visited[xPos][yPos] = true;
        
        int sum = population[xPos][yPos];

        while (!queue.isEmpty()) {
            int[] position = queue.poll();

            for (int i = 0; i < 4; i++) {
                int nx = position[0] + dx[i];
                int ny = position[1] + dy[i];

                if (!canMove(nx, ny)) continue;

                int diff = Math.abs(population[position[0]][position[1]] - population[nx][ny]);
                if (diff >= l && diff <= r) {
                    visited[nx][ny] = true;
                    queue.add(new int[] {nx, ny});
                    merged.add(new int[] {nx, ny});
                    sum += population[nx][ny];
                }
            }
        }

        if (merged.size() > 1) {
            int newPopulation = sum / merged.size();
            for (int[] pos : merged) {
                population[pos[0]][pos[1]] = newPopulation;
            }
            return true;
        }

        return false;
    }

    static boolean canMove(int xPos, int yPos) {
        return xPos >= 0 && yPos >= 0 && xPos < n && yPos < n && !visited[xPos][yPos];
    }
}
