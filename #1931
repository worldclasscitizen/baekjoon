import java.util.*;
import java.io.*;

class Conference implements Comparable<Conference> {
  int start;
  int end;

  public Conference(int start, int end) {
    this.start = start;
    this.end = end;
  }
  
  @Override
  public int compareTo(Conference other) {
    if(this.end == other.end) { return this.start - other.start; }
    return this.end - other.end;
  }
}

public class Main {
  public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    StringTokenizer st = new StringTokenizer(br.readLine());
    int n = Integer.parseInt(st.nextToken());

    PriorityQueue<Conference> pq = new PriorityQueue<>();
    for(int i = 0; i < n; i++) {
      st = new StringTokenizer(br.readLine());
      int startTime = Integer.parseInt(st.nextToken());
      int endTime = Integer.parseInt(st.nextToken());

      Conference conf = new Conference(startTime, endTime);
      pq.add(conf);
    }
    
    int answer = 0;
    if(!pq.isEmpty()) {
      Conference temp =pq.poll();
      answer++;
      while(!pq.isEmpty()) {
        if(temp.end <= pq.peek().start) {
          answer++;
          temp = pq.poll();
        }
        else {
          pq.poll();
        }
      }
    }

    System.out.println(answer);
  }
}
