import java.io.*;
import java.util.*;

public class Main {
    static int n;

    static class Node {
        int x;
        int y;
        int cost;

        public Node(int x, int y, int cost) {
            this.x = x;
            this.y = y;
            this.cost = cost;
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
        int t = 1;
        while (true) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            n = Integer.parseInt(st.nextToken());        
            if (n == 0) break;

            int[][] map = new int[n][n];
            int[][] dist = new int[n][n];
            
            for (int i = 0; i < n; i++) {
                st = new StringTokenizer(br.readLine());
                for (int j = 0; j < n; j++) {
                    map[i][j] = Integer.parseInt(st.nextToken());
                    dist[i][j] = Integer.MAX_VALUE;
                }
            }

            int[] dx = { -1, 0, 1, 0 };
            int[] dy = { 0, 1 , 0, -1 };

            PriorityQueue<Node> q = new PriorityQueue<Node>((o1, o2) -> Integer.compare(o1.cost, o2.cost));
            q.offer(new Node(0, 0, map[0][0]));
            dist[0][0] = map[0][0];

            while (!q.isEmpty()) {
                Node curNode = q.poll();

                for (int s = 0; s < 4; s++) {
                    int nx = curNode.x + dx[s];
                    int ny = curNode.y + dy[s];

                    if (nx >= 0 && ny >= 0 && nx < n && ny < n) {
                        int newCost = curNode.cost + map[nx][ny];
                        if (dist[nx][ny] > newCost) {
                            dist[nx][ny] = newCost;
                            q.offer(new Node(nx, ny, newCost));
                        }
                    }
                }
            }

            System.out.println("Problem " + t++ + ": " + dist[n-1][n-1]);
        }
    }
}
