import java.io.*;
import java.util.*;

public class Main {
    static int n, m;
    static int[][] map;

    static int[] dx = { 0, 0, -1, 1 }; // 오른쪽, 왼쪽, 위, 아래
    static int[] dy = { 1, -1, 0, 0 };
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        m = Integer.parseInt(st.nextToken());
        n = Integer.parseInt(st.nextToken());
        map = new int[n][m];

        Queue<int[]> queue = new LinkedList<>();
        int total = 0;
        int riped = 0;

        for (int i = 0; i < n; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < m; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
                
                if (map[i][j] == 1) {
                    queue.add(new int[]{i, j});
                    riped++;
                }
                if (map[i][j] != -1) {
                    total++;
                }
            }
        }

        int days = 0;
        
        while(!queue.isEmpty()) {
            if (riped == total) {
                System.out.println(days);
                return;
            }

            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int[] cur = queue.poll();

                for (int dist = 0; dist< 4; dist++) {
                    int nx = cur[0] + dx[dist];
                    int ny = cur[1] + dy[dist];

                    if (nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
                    if (map[nx][ny] == 0) {
                        map[nx][ny] = 1;
                        riped++;
                        queue.add(new int[]{nx, ny});
                    }
                }
            }
            days++;
        }
        System.out.println(-1);
    }
}
