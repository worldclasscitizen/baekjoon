import java.io.*;
import java.util.*;

public class Main {
    static char[][] board, no_green_board;
    static boolean[][] visited;
    static int n;
    static int count;
    
    static int[] dx = { -1, 0, 1, 0 };
    static int[] dy = { 0, 1, 0, -1 };

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
        
        n = Integer.parseInt(st.nextToken());
        board = new char[n][n];
        no_green_board = new char[n][n];
        visited = new boolean[n][n];
        
        for (int i = 0; i < n; i++) {
            String str = br.readLine();
            for (int j = 0; j < n; j++) {
                board[i][j] = str.charAt(j);
                if (board[i][j] == 'G') {
                    no_green_board[i][j] = 'R';
                }
                else {
                    no_green_board[i][j] = board[i][j];
                }
            }
        }

        // 일반 case
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (!visited[i][j]) {
                    dfs(i, j, board[i][j], board);
                }
            }
        }
        System.out.print(count + " ");

        // 색맹 case
        visited = new boolean[n][n];
        count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (!visited[i][j]) {
                    dfs(i, j, no_green_board[i][j], no_green_board);
                }
            }
        }
        System.out.println(count);       
    }

    static void dfs(int xPos, int yPos, char c, char[][] playground) {
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[] {xPos, yPos});
        visited[xPos][yPos] = true;

        while (!queue.isEmpty()) {
            for (int size = 0; size < queue.size(); size++) {
                int[] position = queue.poll();
    
                for (int i = 0; i < 4; i++) {
                    int nx = position[0] + dx[i];
                    int ny = position[1] + dy[i];
    
                    if (!canMove(nx, ny)) continue; 

                    if (playground[nx][ny] == playground[position[0]][position[1]]) {
                        queue.add(new int[] {nx, ny});
                        visited[nx][ny] = true;
                    }
                }
            }

            
        }
        count++;
        
    }

    static boolean canMove(int xPos, int yPos) {
        if (xPos < 0 || yPos < 0 || xPos >= n || yPos >= n || visited[xPos][yPos]) {
            return false;
        }
        return true;
    }
}
