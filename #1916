import java.io.*;
import java.util.*;

public class Main {
    

    static int n, m;
    static class Node {
        int end;
        int cost;

        public Node(int end, int cost) {
            this.end = end;
            this.cost = cost;
        }
    }
    

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
        
        n = Integer.parseInt(br.readLine());
        m = Integer.parseInt(br.readLine());

        List<ArrayList<Node>> graph = new ArrayList<>();
        for (int i = 0; i <= n; i++) {
            graph.add(new ArrayList<>());
        }

        for (int i = 0; i < m; i++) {
            st = new StringTokenizer(br.readLine());
            int start = Integer.parseInt(st.nextToken());
            int end = Integer.parseInt(st.nextToken());
            int cost = Integer.parseInt(st.nextToken());

            graph.get(start).add(new Node(end, cost));
        }

        st = new StringTokenizer(br.readLine());
        int startCity = Integer.parseInt(st.nextToken());
        int endCity = Integer.parseInt(st.nextToken());

        int[] dist = new int[n + 1];
        for (int i = 0; i <= n; i++) {
            dist[i] = Integer.MAX_VALUE;
        }

        PriorityQueue<Node> q = new PriorityQueue<Node>((o1, o2) -> Integer.compare(o1.cost, o2.cost));
        q.offer(new Node(startCity, 0));
        dist[startCity] = 0;
        while (!q.isEmpty()) {
            Node curNode = q.poll();

            if (dist[curNode.end] < curNode.cost) {
                continue;
            }

            for (Node nextNode : graph.get(curNode.end)) {
                if (dist[nextNode.end] > curNode.cost + nextNode.cost) {
                    dist[nextNode.end] = curNode.cost + nextNode.cost;
                    q.offer(new Node(nextNode.end, dist[nextNode.end]));
                }
            }
        }

        System.out.println(dist[endCity]);
        
        
    }
    
}
