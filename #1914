import java.io.*;
import java.math.BigInteger;
import java.util.*;

public class Main {

  public static StringBuilder sb = new StringBuilder();

  public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    StringTokenizer st = new StringTokenizer(br.readLine());

    int N = Integer.parseInt(st.nextToken());

    BigInteger RESULT = BigInteger.valueOf(2).pow(N).subtract(BigInteger.ONE);
    sb.append(RESULT).append('\n');

    if (N > 20) {
      System.out.println(sb);
      System.exit(0);
    }

    Hanoi(N, 1, 2, 3);
    System.out.println(sb);
  }

  /*
   * N : 원판의 개수
   * start : 출발지
   * mid : 옮기기 위해 이동해야 장소
   * to : 목적지
   */

  public static void Hanoi(int N, int depart, int mid, int arrival) {
    // 이동할 원반의 수가 1개라면?
    if (N == 1) {
      sb.append(depart + " " + arrival + "\n");
      return;
    }

    // A -> C로 옮긴다고 가정할 떄,
    // STEP 1 : N-1개를 A에서 B로 이동 (= depart 지점의 N-1개의 원판을 mid 지점으로 옮긴다.)
    Hanoi(N - 1, depart, arrival, mid);

    // STEP 2 : 1개를 A에서 C로 이동 (= start 지점의 N번째 원판을 arrival지점으로 옮긴다.)
    sb.append(depart + " " + arrival + "\n");

    // STEP 3 : N-1개를 B에서 C로 이동 (= mid 지점의 N-1개의 원판을 arrival 지점으로 옮긴다.)
    Hanoi(N - 1, mid, depart, arrival);

  }
}
