import java.io.*;
import java.util.*;

public class Main {
    static int[] bits;
    static int n;

    static int result = Integer.MAX_VALUE;

    static int A;

    static List<Food> foodList;

    static int[] perm;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());

        n = Integer.parseInt(st.nextToken());
        A = (int) Math.pow(2, n) - 1;

        foodList = new ArrayList<Food>();

        perm = new int[n];
        
        for (int i = 0; i < n; i++) {

            st = new StringTokenizer(br.readLine());

            int s = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());

            foodList.add(new Food(s, b));

        }

        search();

        System.out.println(result);
    }

    static class Food {
        int s;
        int b;

        public Food(int s, int b) {
            this.s = s;
            this.b = b;
        }
    }

    static void search() {

        for (int subnet = A; subnet > 0; subnet = ((subnet - 1) & A)) {
            bits = new int[n];
            makeBinaryArray(subnet);

            List<Food> ingredients = new ArrayList<>();
            for (int i = 0; i < n; i++) {
                if (bits[i] == 0) {
                    continue;
                }
                else if (bits[i] == 1) {
                    ingredients.add(foodList.get(i));
                }
            }

            if (ingredients.size() > 0) {
                calculate(ingredients);
            }
        }
    }

    static void makeBinaryArray(int subnet) {
        for (int i = n - 1; i >= 0; i--) {
            bits[(n - 1) - i] = (subnet >> i) & 1;
        }
    }

    static void calculate(List<Food> ingredients) {
        int resultS = 1;
        int resultB = 0;

        for (int i = 0; i < ingredients.size(); i++) {
            resultS *= ingredients.get(i).s;
            resultB += ingredients.get(i).b;
        }

        int tempResult = Math.abs(resultS - resultB);

        result = Math.min(result, tempResult);
    }
}
